package gemini

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// Client –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini AI
type Client struct {
	httpClient *http.Client
	apiKey     string
	model      string
}

// NewClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Gemini
func NewClient(apiKey, model string) *Client {
	return &Client{
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		apiKey: apiKey,
		model:  model,
	}
}

// GeminiRequest –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini
type GeminiRequest struct {
	Contents []Content `json:"contents"`
}

// Content –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
type Content struct {
	Parts []Part `json:"parts"`
}

// Part –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
type Part struct {
	Text string `json:"text"`
}

// GeminiResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini
type GeminiResponse struct {
	Candidates []Candidate `json:"candidates"`
	Error      *GeminiError `json:"error,omitempty"`
}

// Candidate –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
type Candidate struct {
	Content Content `json:"content"`
}

// GeminiError –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –æ—Ç Gemini
type GeminiError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
	Status  string `json:"status"`
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Gemini –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
func (c *Client) SendMessage(message string, context string) (string, error) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	fullMessage := message
	if context != "" {
		fullMessage = fmt.Sprintf("–ö–æ–Ω—Ç–µ–∫—Å—Ç: %s\n\n–í–æ–ø—Ä–æ—Å: %s", context, message)
	}

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
	request := GeminiRequest{
		Contents: []Content{
			{
				Parts: []Part{
					{Text: fullMessage},
				},
			},
		},
	}

	jsonData, err := json.Marshal(request)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON: %w", err)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL
	url := fmt.Sprintf("https://generativelanguage.googleapis.com/v1beta/models/%s:generateContent?key=%s", c.model, c.apiKey)

	// –°–æ–∑–¥–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := c.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	var geminiResp GeminiResponse
	if err := json.NewDecoder(resp.Body).Decode(&geminiResp); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
	if geminiResp.Error != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ Gemini API: %s", geminiResp.Error.Message)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
	if len(geminiResp.Candidates) == 0 || len(geminiResp.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
	}

	return geminiResp.Candidates[0].Content.Parts[0].Text, nil
}

// ValidateAPIKey –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
func (c *Client) ValidateAPIKey() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
	testClient := NewClient(c.apiKey, "gemini-2.0-flash-exp")
	_, err := testClient.SendMessage("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞.", "")
	return err
}

// GetAvailableModels –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini
func GetAvailableModels() []string {
	return []string{
		"gemini-1.5-flash",
		"gemini-1.5-pro",
		"gemini-1.0-pro",
		"gemini-2.0-flash-exp",
		"gemini-2.5-pro",
		"gemini-2.5-flash",
	}
}

// GetModelDescription –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
func GetModelDescription(model string) string {
	descriptions := map[string]string{
		"gemini-1.5-flash": "üöÄ –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
		"gemini-1.5-pro":   "üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å - –ª—É—á—à–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á",
		"gemini-1.0-pro":   "‚ö° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å - –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞",
		"gemini-2.0-flash-exp": "‚ú® –ù–æ–≤–µ–π—à–∞—è –º–æ–¥–µ–ª—å Gemini 2.0 Flash Experimental",
		"gemini-2.5-pro": "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å Gemini 2.5 Pro",
		"gemini-2.5-flash": "‚ö° –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Gemini 2.5 Flash",
	}

	if desc, exists := descriptions[model]; exists {
		return desc
	}
	return "üìù –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å Gemini"
}