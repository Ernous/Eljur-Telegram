package bot

import (
	"fmt"
	"strconv"
	"strings"

	"school-diary-bot/internal/eljur"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// formatDateRu –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ YYYYMMDD –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
func formatDateRu(dateStr string) string {
	if len(dateStr) != 8 {
		return dateStr
	}

	year := dateStr[:4]
	month := dateStr[4:6]
	day := dateStr[6:8]

	monthNames := map[string]string{
		"01": "—è–Ω–≤–∞—Ä—è", "02": "—Ñ–µ–≤—Ä–∞–ª—è", "03": "–º–∞—Ä—Ç–∞", "04": "–∞–ø—Ä–µ–ª—è",
		"05": "–º–∞—è", "06": "–∏—é–Ω—è", "07": "–∏—é–ª—è", "08": "–∞–≤–≥—É—Å—Ç–∞",
		"09": "—Å–µ–Ω—Ç—è–±—Ä—è", "10": "–æ–∫—Ç—è–±—Ä—è", "11": "–Ω–æ—è–±—Ä—è", "12": "–¥–µ–∫–∞–±—Ä—è",
	}

	monthName := monthNames[month]
	if monthName == "" {
		monthName = month
	}

	// –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –∏–∑ –¥–Ω—è
	dayInt, _ := strconv.Atoi(day)
	return fmt.Sprintf("%d %s %s", dayInt, monthName, year)
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) HandleMessage(message *tgbotapi.Message) error {
	user := b.GetUserState(message.Chat.ID)
	text := message.Text

	switch user.State {
	case "auth_waiting":
		return b.handleAuthInput(user, text)
	case "message_compose_subject":
		return b.handleMessageSubject(user, text)
	case "message_compose_text":
		return b.handleMessageText(user, text)
	default:
		return b.handleCommands(user, text)
	}
}

// handleCommands –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) handleCommands(user *UserState, text string) error {
	switch text {
	case "/start":
		return b.handleStart(user)
	case "/help":
		return b.handleHelp(user)
	case "/login":
		return b.handleLogin(user)
	case "/logout":
		return b.handleLogout(user)
	case "/diary":
		return b.handleDiary(user)
	case "/periods":
		return b.handlePeriods(user)
	case "/messages":
		return b.handleMessages(user)
	case "/schedule":
		return b.handleSchedule(user)
	case "/marks":
		return b.handleMarks(user)
	default:
		return b.SendMessage(user.ChatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.", nil)
	}
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStart(user *UserState) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìö –î–Ω–µ–≤–Ω–∏–∫", "diary"),
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ü–µ—Ä–∏–æ–¥—ã", "periods"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", "messages"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ü–µ–Ω–∫–∏", "marks"),
			tgbotapi.NewInlineKeyboardButtonData("üîê –í–æ–π—Ç–∏", "login"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"),
		),
	)

	welcomeText := "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫!*\n\n"
	if user.Client.IsAuthenticated() {
		welcomeText += "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n"
	} else {
		welcomeText += "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n\n"
	}
	welcomeText += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

	return b.SendMessage(user.ChatID, welcomeText, keyboard)
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelp(user *UserState) error {
	helpText := "ü§ñ *–®–∫–æ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫*\n\n" +
		"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
		"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
		"/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
		"/logout - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n" +
		"/diary - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞\n" +
		"/periods - –£—á–µ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n" +
		"/messages - –°–æ–æ–±—â–µ–Ω–∏—è\n" +
		"/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n" +
		"/marks - –û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n" +
		"/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
		"*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n" +
		"1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /login\n" +
		"2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n" +
		"3. –í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ–¥–µ–ª–∏ –∏ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n\n" +
		"*–ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:*\n" +
		"–õ–æ–≥–∏–Ω: \\`Ivanov\\`\n" +
		"–ü–∞—Ä–æ–ª—å: \\`password123\\`"

	return b.SendMessage(user.ChatID, helpText, nil)
}

// handleLogin –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
func (b *Bot) handleLogin(user *UserState) error {
	if user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞.", nil)
	}

	user.State = "auth_waiting"
	user.AuthStep = 1

	return b.SendMessage(user.ChatID, "üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:\n\n_–ü—Ä–∏–º–µ—Ä: Ivanov_", nil)
}

// handleLogout –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
func (b *Bot) handleLogout(user *UserState) error {
	user.Client = eljur.NewClient()
	user.State = "idle"
	user.AuthStep = 0
	user.TempLogin = ""
	user.TempPassword = ""

	return b.SendMessage(user.ChatID, "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", nil)
}

// handleAuthInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func (b *Bot) handleAuthInput(user *UserState, text string) error {
	switch user.AuthStep {
	case 1: // –õ–æ–≥–∏–Ω
		user.TempLogin = strings.TrimSpace(text)
		user.AuthStep = 2
		return b.SendMessage(user.ChatID, "üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:\n\n_–ü—Ä–∏–º–µ—Ä: password123_", nil)

	case 2: // –ü–∞—Ä–æ–ª—å
		user.TempPassword = strings.TrimSpace(text)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
		err := user.Client.Authenticate(user.TempLogin, user.TempPassword)

		// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		user.TempLogin = ""
		user.TempPassword = ""
		user.State = "idle"
		user.AuthStep = 0

		if err != nil {
			return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é /login", err), nil)
		}

		// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		_ = b.SendMessage(user.ChatID, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞.", nil)
		return b.handleStart(user)
	}

	return nil
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
func (b *Bot) HandleCallback(query *tgbotapi.CallbackQuery) error {
	user := b.GetUserState(query.Message.Chat.ID)
	data := query.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	b.AnswerCallback(query.ID, "")

	switch {
	case data == "start":
		return b.handleStart(user)
	case data == "diary":
		return b.handleDiary(user)
	case data == "periods":
		return b.handlePeriods(user)
	case data == "messages":
		return b.handleMessages(user)
	case data == "schedule":
		return b.handleSchedule(user)
	case data == "marks":
		return b.handleMarks(user)
	case data == "login":
		return b.handleLogin(user)
	case data == "help":
		return b.handleHelp(user)
	case data == "clear_chat":
		return b.handleClearChat(user)
	case strings.HasPrefix(data, "week_"):
		return b.handleWeekSelect(user, data)
	case strings.HasPrefix(data, "period_"):
		return b.handlePeriodSelect(user, data)
	case strings.HasPrefix(data, "msg_read_"):
		return b.handleReadMessage(user, data)
	case strings.HasPrefix(data, "compose_to_"):
		return b.handleSelectRecipient(user, data)
	case strings.HasPrefix(data, "msg_"):
		return b.handleMessageAction(user, data)
	default:
		return b.SendMessage(user.ChatID, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...", nil)
	}
}

// handleDiary –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞
func (b *Bot) handleDiary(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª—å
	periods, err := user.Client.GetPeriods(true, false)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: %v", err), nil)
	}

	if len(periods.Response.Result.Students) == 0 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ", nil)
	}

	student := periods.Response.Result.Students[0]
	if len(student.Periods) == 0 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã", nil)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	return b.showWeekSelection(user, student.Periods[len(student.Periods)-1]) // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ (—Ç–µ–∫—É—â–∏–π)
}

// showWeekSelection –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª—å
func (b *Bot) showWeekSelection(user *UserState, period eljur.Period) error {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	text := fmt.Sprintf("üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –∏–∑ %s:*\n\n", period.FullName)

	for i, week := range period.Weeks {
		if i%2 == 0 {
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{})
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —á–∏—Ç–∞–±–ª—ã–π —Ñ–æ—Ä–º–∞—Ç
		startFormatted := formatDateRu(week.Start)
		endFormatted := formatDateRu(week.End)
		weekTitle := fmt.Sprintf("%s - %s", startFormatted, endFormatted)

		weekData := fmt.Sprintf("week_%s_%s_%s", period.Name, week.Start, week.End)
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üìÖ %s", weekTitle),
			weekData,
		)

		keyboard[len(keyboard)-1] = append(keyboard[len(keyboard)-1], button)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "start"),
	})

	return b.SendMessage(user.ChatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleWeekSelect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
func (b *Bot) handleWeekSelect(user *UserState, data string) error {
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		return b.SendMessage(user.ChatID, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏", nil)
	}

	startDate := parts[2]
	endDate := parts[3]

	days := fmt.Sprintf("%s-%s", startDate, endDate)
	user.CurrentWeek = days

	// –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
	diary, err := user.Client.GetDiary(days)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞: %v", err), nil)
	}

	return b.formatDiary(user, diary)
}

// formatDiary —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω–∏–∫
func (b *Bot) formatDiary(user *UserState, diary *eljur.DiaryResponse) error {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–∏–∫–∞
	var diaryText strings.Builder
	diaryText.WriteString("üìö *–î–Ω–µ–≤–Ω–∏–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é:*\n\n")

	// –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≥–∏–±–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	result := diary.Response.Result
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
	studentsData, hasStudents := result["students"]
	if !hasStudents {
		// –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ students, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞—Ç
		hasLessons := false
		for key, value := range result {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª—é—á –¥–∞—Ç–æ–π (—Ñ–æ—Ä–º–∞—Ç YYYYMMDD)
			if len(key) == 8 {
				if dayData, ok := value.(map[string]interface{}); ok {
					title, _ := dayData["title"].(string)
					if title == "" {
						title = key
					}
					
					diaryText.WriteString(fmt.Sprintf("üìÖ *%s*\n", title))
					
					itemsData, ok := dayData["items"]
					if !ok {
						diaryText.WriteString("   –£—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n\n")
						continue
					}
					
					items, ok := itemsData.(map[string]interface{})
					if !ok || len(items) == 0 {
						diaryText.WriteString("   –£—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n\n")
						continue
					}
					
					hasLessons = true
					
					// –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É
					var lessonNumbers []string
					for lessonNum := range items {
						lessonNumbers = append(lessonNumbers, lessonNum)
					}
					
					// –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞
					for i := 1; i <= 10; i++ {
						lessonNum := fmt.Sprintf("%d", i)
						if lessonData, exists := items[lessonNum]; exists {
							if lesson, ok := lessonData.(map[string]interface{}); ok {
								name, _ := lesson["name"].(string)
								teacher, _ := lesson["teacher"].(string)
								room, _ := lesson["room"].(string)
								starttime, _ := lesson["starttime"].(string)
								endtime, _ := lesson["endtime"].(string)
								
								diaryText.WriteString(fmt.Sprintf("   %s. %s", lessonNum, name))
								
								if teacher != "" {
									diaryText.WriteString(fmt.Sprintf("\n      üë®‚Äçüè´ %s", teacher))
								}
								
								if room != "" {
									diaryText.WriteString(fmt.Sprintf("\n      üè´ –ö–∞–±–∏–Ω–µ—Ç %s", room))
								}
								
								if starttime != "" && endtime != "" {
									diaryText.WriteString(fmt.Sprintf("\n      ‚è∞ %s - %s", starttime, endtime))
								}
								
								// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
								if homeworkData, ok := lesson["homework"]; ok {
									if homework, ok := homeworkData.(map[string]interface{}); ok && len(homework) > 0 {
										diaryText.WriteString("\n      üìù –î–ó:")
										for _, hwData := range homework {
											if hw, ok := hwData.(map[string]interface{}); ok {
												if value, ok := hw["value"].(string); ok && value != "" {
													diaryText.WriteString(fmt.Sprintf(" %s", value))
												}
											}
										}
									}
								}
								
								diaryText.WriteString("\n")
							}
						}
					}
					diaryText.WriteString("\n")
				}
			}
		}
		
		if !hasLessons {
			diaryText.WriteString("üìù –£—Ä–æ–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç")
		}
	} else {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
		students, ok := studentsData.([]interface{})
		if !ok {
			diaryText.WriteString("üìù –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–Ω–µ–≤–Ω–∏–∫–∞")
		} else if len(students) == 0 {
			diaryText.WriteString("üìù –ó–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç")
		} else {
			hasLessons := false
			for _, studentData := range students {
				student, ok := studentData.(map[string]interface{})
				if !ok {
					continue
				}

				daysData, ok := student["days"]
				if !ok {
					continue
				}

				days, ok := daysData.([]interface{})
				if !ok {
					continue
				}

				for _, dayData := range days {
					day, ok := dayData.(map[string]interface{})
					if !ok {
						continue
					}

					date, _ := day["date"].(string)
					diaryText.WriteString(fmt.Sprintf("üìÖ *%s*\n", date))

					lessonsData, ok := day["lessons"]
					if !ok {
						diaryText.WriteString("   –£—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n\n")
						continue
					}

					lessons, ok := lessonsData.([]interface{})
					if !ok || len(lessons) == 0 {
						diaryText.WriteString("   –£—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n\n")
						continue
					}

					hasLessons = true
					for _, lessonData := range lessons {
						lesson, ok := lessonData.(map[string]interface{})
						if !ok {
							continue
						}

						name, _ := lesson["name"].(string)
						number, _ := lesson["number"].(float64)
						homework, _ := lesson["homework"].(string)

						diaryText.WriteString(fmt.Sprintf("   %.0f. %s", number, name))

						if marksData, ok := lesson["marks"]; ok {
							if marks, ok := marksData.([]interface{}); ok && len(marks) > 0 {
								diaryText.WriteString(" - –û—Ü–µ–Ω–∫–∏: ")
								for i, markData := range marks {
									if mark, ok := markData.(map[string]interface{}); ok {
										if i > 0 {
											diaryText.WriteString(", ")
										}
										if value, ok := mark["value"].(string); ok {
											diaryText.WriteString(value)
										}
									}
								}
							}
						}

						if homework != "" {
							diaryText.WriteString(fmt.Sprintf("\n      üìù –î–ó: %s", homework))
						}

						diaryText.WriteString("\n")
					}
					diaryText.WriteString("\n")
				}
			}

			if !hasLessons {
				diaryText.WriteString("üìù –£—Ä–æ–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç")
			}
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –Ω–µ–¥–µ–ª—é", "diary"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, diaryText.String(), keyboard)
}

// handlePeriods –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–∏–æ–¥–æ–≤
func (b *Bot) handlePeriods(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	periods, err := user.Client.GetPeriods(true, false)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: %v", err), nil)
	}

	if len(periods.Response.Result.Students) == 0 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ", nil)
	}

	student := periods.Response.Result.Students[0]
	text := "üìÖ *–£—á–µ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:*\n\n"

	for _, period := range student.Periods {
		status := "‚úÖ"
		if period.Disabled {
			status = "‚è∏"
		}

		text += fmt.Sprintf("%s *%s*\n", status, period.FullName)
		startFormatted := formatDateRu(period.Start)
		endFormatted := formatDateRu(period.End)
		text += fmt.Sprintf("   üìÖ %s - %s\n", startFormatted, endFormatted)
		text += fmt.Sprintf("   üìä –ù–µ–¥–µ–ª—å: %d\n\n", len(period.Weeks))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleMessages –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) handleMessages(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì• –í—Ö–æ–¥—è—â–∏–µ", "msg_inbox"),
			tgbotapi.NewInlineKeyboardButtonData("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", "msg_sent"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "msg_compose"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, "üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard)
}

// handleMessageAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
func (b *Bot) handleMessageAction(user *UserState, action string) error {
	switch action {
	case "msg_inbox":
		return b.showMessages(user, "inbox")
	case "msg_sent":
		return b.showMessages(user, "sent")
	case "msg_compose":
		return b.startComposeMessage(user)
	default:
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", nil)
	}
}

// showMessages –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
func (b *Bot) showMessages(user *UserState, folder string) error {
	messages, err := user.Client.GetMessages(folder)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err), nil)
	}

	folderName := "üì• –í—Ö–æ–¥—è—â–∏–µ"
	if folder == "sent" {
		folderName = "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ"
	}

	text := fmt.Sprintf("üí¨ *%s —Å–æ–æ–±—â–µ–Ω–∏—è:*\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", folderName)
	var keyboard [][]tgbotapi.InlineKeyboardButton

	if len(messages.Response.Result.Messages) == 0 {
		text += "\n\n_–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç_"
	} else {
		for i, msg := range messages.Response.Result.Messages {
			if i >= 15 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π
				break
			}

			subject := msg.Subject
			if len(subject) > 35 {
				subject = subject[:35] + "..."
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
			readStatus := "üìñ"
			if !msg.Read {
				readStatus = "üì©"
			}

			sender := msg.From
			if len(sender) > 20 {
				sender = sender[:20] + "..."
			}

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			buttonText := fmt.Sprintf("%s %s\nüë§ %s", readStatus, subject, sender)
			callbackData := fmt.Sprintf("msg_read_%s_%s", folder, msg.ID)

			button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", fmt.Sprintf("msg_%s", folder)),
		tgbotapi.NewInlineKeyboardButtonData("üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", "clear_chat"),
	})
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "messages"),
	})

	return b.SendMessage(user.ChatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleClearChat –æ—á–∏—â–∞–µ—Ç —á–∞—Ç
func (b *Bot) handleClearChat(user *UserState) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á—Ç–æ–±—ã "–æ—á–∏—Å—Ç–∏—Ç—å" —á–∞—Ç
	for i := 0; i < 20; i++ {
		_ = b.SendMessage(user.ChatID, ".", nil)
	}

	return b.SendMessage(user.ChatID, "üóë *–ß–∞—Ç –æ—á–∏—â–µ–Ω*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
			),
		))
}

// handleReadMessage –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleReadMessage(user *UserState, data string) error {
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		return b.SendMessage(user.ChatID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è", nil)
	}

	folder := parts[2]
	messageID := parts[3]

	// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	msgDetails, err := user.Client.GetMessageDetails(messageID)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err), nil)
	}

	if msgDetails.Response.State != 200 {
		return b.SendMessage(user.ChatID, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", nil)
	}

	// log.Printf("[MESSAGE_DETAILS] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: %+v", msgDetails.Response.Result)

	from := msgDetails.Response.Result.From
	subject := msgDetails.Response.Result.Subject
	text := msgDetails.Response.Result.Text
	date := msgDetails.Response.Result.Date
	to := msgDetails.Response.Result.To

	if from == "" && to != "" {
		from = "–í—ã ‚Üí " + to
	} else if from == "" {
		from = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
	}
	if subject == "" {
		subject = "–ë–µ–∑ —Ç–µ–º—ã"
	}
	if text == "" {
		text = "_–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_"
	}
	if date == "" {
		date = "_–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞_"
	}

	messageText := fmt.Sprintf("üì® *–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:*\n\n"+
		"üë§ –û—Ç: %s\n"+
		"üìã –¢–µ–º–∞: %s\n"+
		"üìÖ –î–∞—Ç–∞: %s\n\n"+
		"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n%s",
		from, subject, date, text)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Å–æ–æ–±—â–µ–Ω–∏—è–º", fmt.Sprintf("msg_%s", folder)),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, messageText, keyboard)
}

// handleSelectRecipient –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleSelectRecipient(user *UserState, data string) error {
	parts := strings.Split(data, "_")
	if len(parts) < 3 {
		return b.SendMessage(user.ChatID, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", nil)
	}

	recipientID := parts[2]
	user.TempRecipient = recipientID
	user.State = "message_compose_subject"

	return b.SendMessage(user.ChatID, "‚úçÔ∏è *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\nüìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è:", nil)
}

// startComposeMessage –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
func (b *Bot) startComposeMessage(user *UserState) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
	receivers, err := user.Client.GetMessageReceivers()
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: %v", err), nil)
	}

	if len(receivers.Response.Result.Receivers) == 0 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", nil)
	}

	text := "‚úçÔ∏è *–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for i, receiver := range receivers.Response.Result.Receivers {
		if i >= 20 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
			break
		}

		buttonText := fmt.Sprintf("üë§ %s", receiver.Name)
		callbackData := fmt.Sprintf("compose_to_%s", receiver.ID)

		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
	}

	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "messages"),
	})

	return b.SendMessage(user.ChatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleMessageSubject –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessageSubject(user *UserState, subject string) error {
	user.TempLogin = subject // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º—ã
	user.State = "message_compose_text"
	return b.SendMessage(user.ChatID, "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", nil)
}

// handleMessageText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessageText(user *UserState, text string) error {
	subject := user.TempLogin
	recipientID := user.TempRecipient

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	user.TempLogin = ""
	user.TempRecipient = ""
	user.State = "idle"

	if recipientID == "" {
		return b.SendMessage(user.ChatID, "‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω", nil)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
	recipients := []string{recipientID}

	_, err := user.Client.SendMessage(recipients, subject, text)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err), nil)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	receivers, err := user.Client.GetMessageReceivers()
	recipientName := recipientID
	if err == nil {
		for _, receiver := range receivers.Response.Result.Receivers {
			if receiver.ID == recipientID {
				recipientName = receiver.Name
				break
			}
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ", "msg_compose"),
			tgbotapi.NewInlineKeyboardButtonData("üì• –ö —Å–æ–æ–±—â–µ–Ω–∏—è–º", "messages"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, fmt.Sprintf("‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: %s\nüìù –¢–µ–º–∞: %s", recipientName, subject), keyboard)
}

// handleSchedule –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func (b *Bot) handleSchedule(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	schedule, err := user.Client.GetSchedule("", "")
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", err), nil)
	}

	text := "üìã *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:*\n\n"

	if len(schedule.Response.Result.Students) == 0 {
		text += "_–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ_"
	} else {
		student := schedule.Response.Result.Students[0]
		for _, day := range student.Days {
			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
			dayFormatted := formatDateRu(day.Date)
			text += fmt.Sprintf("üìÖ *%s*\n", dayFormatted)

			if len(day.Lessons) == 0 {
				text += "   _–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç_\n\n"
				continue
			}

			for _, lesson := range day.Lessons {
				text += fmt.Sprintf("   %d. *%s*\n", lesson.Number, lesson.Name)
				if lesson.Teacher != "" {
					text += fmt.Sprintf("      üë®‚Äçüè´ %s\n", lesson.Teacher)
				}
				if lesson.Room != "" {
					text += fmt.Sprintf("      üè´ –ö–∞–±–∏–Ω–µ—Ç %s\n", lesson.Room)
				}
				if lesson.Time != "" {
					text += fmt.Sprintf("      ‚è∞ %s\n", lesson.Time)
				}
			}
			text += "\n"
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleMarks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ü–µ–Ω–æ–∫
func (b *Bot) handleMarks(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ I —á–µ—Ç–≤–µ—Ä—Ç—å", "period_1"),
			tgbotapi.NewInlineKeyboardButtonData("2Ô∏è‚É£ II —á–µ—Ç–≤–µ—Ä—Ç—å", "period_2"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3Ô∏è‚É£ III —á–µ—Ç–≤–µ—Ä—Ç—å", "period_3"),
			tgbotapi.NewInlineKeyboardButtonData("4Ô∏è‚É£ IV —á–µ—Ç–≤–µ—Ä—Ç—å", "period_4"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ó–∞ –≤–µ—Å—å –≥–æ–¥", "period_year"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ü–µ–Ω–æ–∫:*", keyboard)
}

// handlePeriodSelect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ü–µ–Ω–æ–∫
func (b *Bot) handlePeriodSelect(user *UserState, data string) error {
	var period int
	var periodName string

	switch data {
	case "period_1":
		period = 1
		periodName = "I —á–µ—Ç–≤–µ—Ä—Ç—å"
	case "period_2":
		period = 2
		periodName = "II —á–µ—Ç–≤–µ—Ä—Ç—å"
	case "period_3":
		period = 3
		periodName = "III —á–µ—Ç–≤–µ—Ä—Ç—å"
	case "period_4":
		period = 4
		periodName = "IV —á–µ—Ç–≤–µ—Ä—Ç—å"
	case "period_year":
		period = 0 // –ó–∞ –≤–µ—Å—å –≥–æ–¥
		periodName = "–í–µ—Å—å —É—á–µ–±–Ω—ã–π –≥–æ–¥"
	default:
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", nil)
	}

	marks, err := user.Client.GetMarks(period, "", "")
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫: %v", err), nil)
	}

	return b.formatMarks(user, marks, periodName)
}

// formatMarks —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫–∏
func (b *Bot) formatMarks(user *UserState, marks *eljur.MarksResponse, periodName string) error {
	text := fmt.Sprintf("üìä *–û—Ü–µ–Ω–∫–∏ - %s:*\n\n", periodName)

	if len(marks.Response.Result.Students) == 0 {
		text += "_–û—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã_"
	} else {
		student := marks.Response.Result.Students[0]

		if len(student.Subjects) == 0 {
			text += "_–û—Ü–µ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥_"
		} else {
			for _, subject := range student.Subjects {
				text += fmt.Sprintf("üìö *%s*\n", subject.Name)

				if len(subject.Marks) == 0 {
					text += "   _–û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç_\n\n"
				} else {
					text += "   "
					for _, mark := range subject.Marks {
						text += fmt.Sprintf("`%s` ", mark.Value)
					}

					// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
					if len(subject.Marks) > 0 {
						var sum, count float64
						for _, mark := range subject.Marks {
							if val, err := strconv.ParseFloat(mark.Value, 64); err == nil {
								sum += val
								count++
							}
						}
						if count > 0 {
							avg := sum / count
							text += fmt.Sprintf("\n   üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: `%.2f`", avg)
						}
					}
					text += "\n\n"
				}
			}
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "marks"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}