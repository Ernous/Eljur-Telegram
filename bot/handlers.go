package bot

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"school-diary-bot/bot/eljur"
	"school-diary-bot/internal/gemini"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// splitMessage —É–º–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
func splitMessage(text string, maxLength int) []string {
	if len(text) <= maxLength {
		return []string{text}
	}

	var parts []string
	remaining := text

	for len(remaining) > 0 {
		if len(remaining) <= maxLength {
			parts = append(parts, remaining)
			break
		}

		// –ò—â–µ–º –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ (–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –∏–ª–∏ —Å–ª–æ–≤–∞)
		cutIndex := maxLength

		// –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–∞–∑–∞–¥ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
		if idx := strings.LastIndex(remaining[:maxLength], "\n\n"); idx > maxLength/2 {
			cutIndex = idx + 2
		} else if idx := strings.LastIndex(remaining[:maxLength], "\n"); idx > maxLength/2 {
			cutIndex = idx + 1
		} else if idx := strings.LastIndex(remaining[:maxLength], ". "); idx > maxLength/2 {
			cutIndex = idx + 2
		} else if idx := strings.LastIndex(remaining[:maxLength], " "); idx > maxLength/2 {
			cutIndex = idx + 1
		}

		parts = append(parts, strings.TrimSpace(remaining[:cutIndex]))
		remaining = strings.TrimSpace(remaining[cutIndex:])
	}

	return parts
}

// formatDateRu –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ YYYYMMDD –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
func formatDateRu(dateStr string) string {
	if len(dateStr) != 8 {
		return dateStr
	}

	year := dateStr[:4]
	month := dateStr[4:6]
	day := dateStr[6:8]

	monthNames := map[string]string{
		"01": "—è–Ω–≤–∞—Ä—è", "02": "—Ñ–µ–≤—Ä–∞–ª—è", "03": "–º–∞—Ä—Ç–∞", "04": "–∞–ø—Ä–µ–ª—è",
		"05": "–º–∞—è", "06": "–∏—é–Ω—è", "07": "–∏—é–ª—è", "08": "–∞–≤–≥—É—Å—Ç–∞",
		"09": "—Å–µ–Ω—Ç—è–±—Ä—è", "10": "–æ–∫—Ç—è–±—Ä—è", "11": "–Ω–æ—è–±—Ä—è", "12": "–¥–µ–∫–∞–±—Ä—è",
	}

	monthName := monthNames[month]
	if monthName == "" {
		monthName = month
	}

	// –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –∏–∑ –¥–Ω—è
	dayInt, _ := strconv.Atoi(day)
	return fmt.Sprintf("%d %s %s", dayInt, monthName, year)
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) HandleMessage(message *tgbotapi.Message) error {
	user := b.GetUserState(message.Chat.ID)
	text := message.Text

	switch user.State {
	case "auth_waiting":
		return b.handleAuthInput(user, text)
	case "message_compose_subject":
		return b.handleMessageSubject(user, text)
	case "message_compose_text":
		return b.handleMessageText(user, text)
	case "gemini_api_setup":
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å API –∫–ª—é—á–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, message.MessageID)
		b.API.Send(deleteMsg)
		return b.handleGeminiAPISetup(user, text)
	case "gemini_chat":
		return b.handleGeminiChat(user, text)
	default:
		return b.handleCommands(user, text)
	}
}

// handleCommands –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *Bot) handleCommands(user *UserState, text string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	if strings.HasPrefix(text, "/login ") {
		return b.handleLoginWithParams(user, text)
	}
	if strings.HasPrefix(text, "/messages send ") {
		return b.handleMessageSendWithParams(user, text)
	}
	if strings.HasPrefix(text, "/gemini ") {
		return b.handleGeminiWithParams(user, text)
	}

	switch text {
	case "/start":
		return b.handleStart(user)
	case "/help":
		return b.handleHelp(user)
	case "/login":
		return b.handleLogin(user)
	case "/logout":
		return b.handleLogout(user)
	case "/diary":
		return b.handleDiary(user)
	case "/periods":
		return b.handlePeriods(user)
	case "/messages":
		return b.handleMessages(user)
	case "/schedule":
		return b.handleSchedule(user)
	case "/marks":
		return b.handleMarks(user)
	case "/gemini":
		return b.handleGemini(user)
	default:
		return b.SendMessage(user.ChatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.", nil)
	}
}

// handleStart –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleStart(user *UserState) error {
	log.Printf("[START] User %d - IsAuthenticated: %v, Login: %s, Token length: %d", user.ChatID, user.Client.IsAuthenticated(), user.Client.GetLogin(), len(user.Client.GetToken()))
	
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìö –î–Ω–µ–≤–Ω–∏–∫", "diary"),
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ü–µ—Ä–∏–æ–¥—ã", "periods"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", "messages"),
			tgbotapi.NewInlineKeyboardButtonData("üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "schedule"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ü–µ–Ω–∫–∏", "marks"),
			tgbotapi.NewInlineKeyboardButtonData("üîê –í–æ–π—Ç–∏", "login"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("ü§ñ Gemini AI", "gemini"),
		),
	)

	welcomeText := "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∫–æ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫!</b>\n\n"
	if user.Client.IsAuthenticated() {
		welcomeText += "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\n\n"
	} else {
		welcomeText += "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n\n"
	}
	welcomeText += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

	return b.SendMessage(user.ChatID, welcomeText, keyboard)
}

// handleHelp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func (b *Bot) handleHelp(user *UserState) error {
	helpText := "ü§ñ <b>–®–∫–æ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫</b>\n\n" +
		"<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" +
		"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
		"/login - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
		"/logout - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n" +
		"/diary - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞\n" +
		"/periods - –£—á–µ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã\n" +
		"/messages - –°–æ–æ–±—â–µ–Ω–∏—è\n" +
		"/schedule - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n" +
		"/marks - –û—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n" +
		"/gemini - Gemini AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç\n" +
		"/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n" +
		"<b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n" +
		"/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å - –±—ã—Å—Ç—Ä–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n" +
		"/messages send ID \"\u0442\u0435\u043c\u0430\" \"\u0442\u0435\u043a\u0441\u0442\" - –±—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n" +
		"/gemini –≤–æ–ø—Ä–æ—Å - –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI\n\n" +
		"<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n" +
		"<code>/login Ivanov password123</code>\n" +
		"<code>/messages send 123 \"–í–æ–ø—Ä–æ—Å\" \"–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?\"</code>\n" +
		"<code>/gemini –û–±—ä—è—Å–Ω–∏ –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞</code>\n\n" +
		"<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n" +
		"1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º\n" +
		"2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n" +
		"3. –í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ–¥–µ–ª–∏ –∏ –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"

	return b.SendMessage(user.ChatID, helpText, nil)
}

// handleLogin –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
func (b *Bot) handleLogin(user *UserState) error {
	if user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞.", nil)
	}

	user.State = "auth_waiting"
	user.AuthStep = 1

	return b.SendMessage(user.ChatID, "üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å:\n\n<i>–ü—Ä–∏–º–µ—Ä: /login Ivanov passwd123</i>", nil)
}

// handleLoginWithParams –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ /login username password
func (b *Bot) handleLoginWithParams(user *UserState, text string) error {
	if user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /logout –¥–ª—è –≤—ã—Ö–æ–¥–∞.", nil)
	}

	// –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
	parts := strings.Fields(text)
	if len(parts) != 3 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n/login –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n/login Ivanov password123\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", nil)
	}

	username := strings.TrimSpace(parts[1])
	password := strings.TrimSpace(parts[2])

	if username == "" || password == "" {
		return b.SendMessage(user.ChatID, "‚ùå –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.", nil)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	b.SendMessage(user.ChatID, "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...", nil)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
	err := user.Client.Authenticate(username, password)

	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.", err), nil)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	b.SaveUserStateIfNeeded(user)

	// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	_ = b.SendMessage(user.ChatID, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞.", nil)
	return b.handleStart(user)
}

// handleMessageSendWithParams –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
func (b *Bot) handleMessageSendWithParams(user *UserState, text string) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	// –£–±–∏—Ä–∞–µ–º "/messages send " –∏–∑ –Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—ã
	params := strings.TrimPrefix(text, "/messages send ")

	// –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: recipientID "subject" "message text"
	// –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –∫–∞–≤—ã—á–∫–∞–º
	parts := []string{}
	current := ""
	inQuotes := false

	for i, r := range params {
		if r == '"' {
			inQuotes = !inQuotes
		} else if r == ' ' && !inQuotes {
			if current != "" {
				parts = append(parts, current)
				current = ""
			}
		} else {
			current += string(r)
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
		if i == len(params)-1 && current != "" {
			parts = append(parts, current)
		}
	}

	if len(parts) < 3 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n/messages send –ø–æ–ª—É—á–∞—Ç–µ–ª—å_ID \"\u0442\u0435\u043c\u0430\" \"\u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\"\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n/messages send 123 \"–í–æ–ø—Ä–æ—Å –ø–æ —É—Ä–æ–∫—É\" \"–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ?\"", nil)
	}

	recipientID := strings.TrimSpace(parts[0])
	subject := strings.TrimSpace(parts[1])
	messageText := strings.TrimSpace(parts[2])

	if recipientID == "" || subject == "" || messageText == "" {
		return b.SendMessage(user.ChatID, "‚ùå –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", nil)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.SendMessage(user.ChatID, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...", nil)

	recipients := []string{recipientID}
	_, err := user.Client.SendMessage(recipients, subject, messageText)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err), nil)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ", "msg_compose"),
			tgbotapi.NewInlineKeyboardButtonData("üì• –ö —Å–æ–æ–±—â–µ–Ω–∏—è–º", "messages"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, fmt.Sprintf("‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: %s\nüìù –¢–µ–º–∞: %s", recipientID, subject), keyboard)
}

// handleGeminiWithParams –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini AI —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
func (b *Bot) handleGeminiWithParams(user *UserState, text string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ Gemini
	if user.GeminiAPIKey == "" {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Gemini AI —á–µ—Ä–µ–∑ /gemini", nil)
	}

	// –£–±–∏—Ä–∞–µ–º "/gemini " –∏–∑ –Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—ã
	prompt := strings.TrimPrefix(text, "/gemini ")
	prompt = strings.TrimSpace(prompt)

	if prompt == "" {
		return b.SendMessage(user.ChatID, "‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.\n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n/gemini –≤–∞—à –≤–æ–ø—Ä–æ—Å\n\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n/gemini –û–±—ä—è—Å–Ω–∏ –º–Ω–µ –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞", nil)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
	processingMsg := tgbotapi.NewMessage(user.ChatID, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
	sentMsg, _ := b.API.Send(processingMsg)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Gemini
	client := gemini.NewClient(user.GeminiAPIKey, user.GeminiModel)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
	response, err := client.SendMessage(prompt, user.GeminiContext)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞–µ—Ç"
	if sentMsg.MessageID != 0 {
		deleteMsg := tgbotapi.NewDeleteMessage(user.ChatID, sentMsg.MessageID)
		b.API.Send(deleteMsg)
	}
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ Gemini AI: %v", err), nil)
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
	maxLength := 3900
	if len(response) > maxLength {
		response = response[:maxLength] + "...\n\n[–û—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω]"
	}

	// –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	response = strings.ReplaceAll(response, "\u0000", "")
	response = strings.ReplaceAll(response, "`", "'")   // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
	response = strings.ReplaceAll(response, "*", "\\*") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
	response = strings.ReplaceAll(response, "_", "\\_") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
	response = strings.ReplaceAll(response, "[", "\\[") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
	response = strings.ReplaceAll(response, "]", "\\]")
	response = strings.TrimSpace(response)

	if response == "" {
		return b.SendMessage(user.ChatID, "‚ùå Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", nil)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	b.SaveUserStateIfNeeded(user)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç", "gemini_chat"),
			tgbotapi.NewInlineKeyboardButtonData("ü§ñ Gemini –º–µ–Ω—é", "gemini"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	return b.SendMessage(user.ChatID, fmt.Sprintf("ü§ñ <b>Gemini AI:</b>\n\n%s", response), keyboard)
}

// handleLogout –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
func (b *Bot) handleLogout(user *UserState) error {
	user.Client = eljur.NewClient()
	user.State = "idle"
	user.AuthStep = 0
	user.TempLogin = ""
	user.TempPassword = ""

	return b.SendMessage(user.ChatID, "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", nil)
}

// handleAuthInput –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è webhook)
func (b *Bot) handleAuthInput(user *UserState, text string) error {
	switch user.AuthStep {
	case 1: // –õ–æ–≥–∏–Ω
		user.TempLogin = strings.TrimSpace(text)
		user.AuthStep = 2
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		b.SaveUserStateIfNeeded(user)
		return b.SendMessage(user.ChatID, "üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:\n\n<i>–ü—Ä–∏–º–µ—Ä: password123</i>", nil)

	case 2: // –ü–∞—Ä–æ–ª—å
		user.TempPassword = strings.TrimSpace(text)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		b.SendMessage(user.ChatID, "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...", nil)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
		err := user.Client.Authenticate(user.TempLogin, user.TempPassword)

		// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		user.TempLogin = ""
		user.TempPassword = ""
		user.State = "idle"
		user.AuthStep = 0

		if err != nil {
			b.SaveUserStateIfNeeded(user)
			return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –ø–æ–º–æ—â—å—é /login", err), nil)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
		b.SaveUserStateIfNeeded(user)

		// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		_ = b.SendMessage(user.ChatID, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞.", nil)
		return b.handleStart(user)
	}

	return nil
}

// HandleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
func (b *Bot) HandleCallback(query *tgbotapi.CallbackQuery) error {
	user := b.GetUserState(query.Message.Chat.ID)
	data := query.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	b.AnswerCallback(query.ID, "")

	switch {
	case data == "start":
		return b.handleStart(user)
	case data == "diary":
		return b.handleDiary(user)
	case data == "periods":
		return b.handlePeriods(user)
	case data == "messages":
		return b.handleMessages(user)
	case data == "schedule":
		return b.handleSchedule(user)
	case data == "marks":
		return b.handleMarks(user)
	case data == "login":
		return b.handleLogin(user)
	case data == "help":
		return b.handleHelp(user)
	case data == "clear_chat":
		return b.handleClearChat(user)
	case data == "gemini":
		return b.handleGemini(user)
	case data == "gemini_setup":
		return b.handleGeminiSetup(user)
	case data == "gemini_help":
		return b.handleGeminiHelp(user)
	case data == "gemini_model_select":
		return b.handleGeminiModelSelect(user, data) // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
	case strings.HasPrefix(data, "gemini_model_"):
		return b.handleGeminiModelSelect(user, data) // –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
	case data == "gemini_change_key":
		return b.handleGeminiSetup(user) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
	case data == "gemini_reset":
		return b.handleGeminiReset(user)
	case data == "gemini_chat":
		return b.handleGeminiChatStart(user)
	case strings.HasPrefix(data, "gemini_context_"):
		return b.handleGeminiContextSelect(user, data)
	case strings.HasPrefix(data, "week_"):
		return b.handleWeekSelect(user, data)
	case strings.HasPrefix(data, "period_"):
		return b.handlePeriodSelect(user, data)
	case strings.HasPrefix(data, "msg_read_"):
		return b.handleReadMessage(user, data)
	case strings.HasPrefix(data, "compose_to_"):
		return b.handleSelectRecipient(user, data)
	case strings.HasPrefix(data, "msg_"):
		return b.handleMessageAction(user, data)
	default:
		return b.SendMessage(user.ChatID, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...", nil)
	}
}

// handleDiary –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞
func (b *Bot) handleDiary(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª—å
	periods, err := user.Client.GetPeriods(true, false)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: %v", err), nil)
	}

	if len(periods.Response.Result.Students) == 0 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ", nil)
	}

	student := periods.Response.Result.Students[0]
	if len(student.Periods) == 0 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–µ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã", nil)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	return b.showWeekSelection(user, student.Periods[len(student.Periods)-1]) // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥ (—Ç–µ–∫—É—â–∏–π)
}

// showWeekSelection –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª—å
func (b *Bot) showWeekSelection(user *UserState, period eljur.Period) error {
	var keyboard [][]tgbotapi.InlineKeyboardButton

	text := fmt.Sprintf("üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –∏–∑ %s:</b>\n\n", period.FullName)

	for i, week := range period.Weeks {
		if i%2 == 0 {
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{})
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —á–∏—Ç–∞–±—å—ã–π —Ñ–æ—Ä–º–∞—Ç
		startFormatted := formatDateRu(week.Start)
		endFormatted := formatDateRu(week.End)
		weekTitle := fmt.Sprintf("%s - %s", startFormatted, endFormatted)

		weekData := fmt.Sprintf("week_%s_%s_%s", period.Name, week.Start, week.End)
		button := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("üìÖ %s", weekTitle),
			weekData,
		)

		keyboard[len(keyboard)-1] = append(keyboard[len(keyboard)-1], button)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "start"),
	})

	return b.SendMessage(user.ChatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleWeekSelect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
func (b *Bot) handleWeekSelect(user *UserState, data string) error {
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		return b.SendMessage(user.ChatID, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏", nil)
	}

	startDate := parts[2]
	endDate := parts[3]

	days := fmt.Sprintf("%s-%s", startDate, endDate)
	user.CurrentWeek = days

	// –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
	diary, err := user.Client.GetDiary(days)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞: %v", err), nil)
	}

	return b.formatDiary(user, diary)
}

// formatDiary —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω–∏–∫
func (b *Bot) formatDiary(user *UserState, diary *eljur.DiaryResponse) error {
	var diaryText strings.Builder
	diaryText.WriteString("üìö <b>–î–Ω–µ–≤–Ω–∏–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é:</b>\n\n")

	result := diary.Response.Result
	hasLessons := false

	// –ò—â–µ–º –∫–ª—é—á "students" –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
	studentsData, hasStudents := result["students"]
	if !hasStudents {
		diaryText.WriteString("üìù –î–∞–Ω–Ω—ã–µ –æ –¥–Ω–µ–≤–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
	} else {
		// studentsData –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ ID —Å—Ç—É–¥–µ–Ω—Ç–∞
		if studentsMap, ok := studentsData.(map[string]interface{}); ok {
			// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É
			for _, studentInfo := range studentsMap {
				// studentInfo –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
				if studentData, ok := studentInfo.(map[string]interface{}); ok {

					// –ò—â–µ–º –ø–æ–ª–µ "days" –≤ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
					daysData, hasDays := studentData["days"]
					if !hasDays {
						diaryText.WriteString("üìù –î–∞–Ω–Ω—ã–µ –æ –¥–Ω—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
						continue
					}

					// days –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å –¥–∞—Ç–∞–º–∏ –∫–∞–∫ –∫–ª—é—á–∞–º–∏
					if daysMap, ok := daysData.(map[string]interface{}); ok {
						// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
						var dates []string
						for dateKey := range daysMap {
							if len(dateKey) == 8 && isDate(dateKey) {
								dates = append(dates, dateKey)
							}
						}

						// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
						for i := 0; i < len(dates); i++ {
							for j := i + 1; j < len(dates); j++ {
								if dates[i] > dates[j] {
									dates[i], dates[j] = dates[j], dates[i]
								}
							}
						}

						// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–Ω—è–º
						for _, dateKey := range dates {
							if dayInfo, exists := daysMap[dateKey]; exists {
								if dayData, ok := dayInfo.(map[string]interface{}); ok {
									title, _ := dayData["title"].(string)
									if title == "" {
										title = formatDateRu(dateKey)
									}

									diaryText.WriteString(fmt.Sprintf("üìÖ <b>%s</b>\n", title))

									// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫
									if alert, hasAlert := dayData["alert"]; hasAlert {
										if alert == "holiday" {
											if holidayName, ok := dayData["holiday_name"].(string); ok {
												diaryText.WriteString(fmt.Sprintf("   üéâ %s\n", holidayName))
											}
										} else if alert == "today" {
											diaryText.WriteString("   üìç –°–µ–≥–æ–¥–Ω—è\n")
										}
									}

									// –ò—â–µ–º —É—Ä–æ–∫–∏ –≤ items
									itemsData, hasItems := dayData["items"]
									if !hasItems {
										diaryText.WriteString("   –£—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n\n")
										continue
									}

									items, ok := itemsData.(map[string]interface{})
									if !ok || len(items) == 0 {
										diaryText.WriteString("   –£—Ä–æ–∫–æ–≤ –Ω–µ—Ç\n\n")
										continue
									}

									hasLessons = true

									// –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É
									var lessonNumbers []string
									for lessonNum := range items {
										lessonNumbers = append(lessonNumbers, lessonNum)
									}

									// –ü—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —É—Ä–æ–∫–æ–≤
									for i := 0; i < len(lessonNumbers); i++ {
										for j := i + 1; j < len(lessonNumbers); j++ {
											num1, _ := strconv.Atoi(lessonNumbers[i])
											num2, _ := strconv.Atoi(lessonNumbers[j])
											if num1 > num2 {
												lessonNumbers[i], lessonNumbers[j] = lessonNumbers[j], lessonNumbers[i]
											}
										}
									}

									// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Ä–æ–∫–∏
									for _, lessonNum := range lessonNumbers {
										if lessonData, exists := items[lessonNum]; exists {
											if lesson, ok := lessonData.(map[string]interface{}); ok {
												name, _ := lesson["name"].(string)
												teacher, _ := lesson["teacher"].(string)
												room, _ := lesson["room"].(string)
												starttime, _ := lesson["starttime"].(string)
												endtime, _ := lesson["endtime"].(string)

												diaryText.WriteString(fmt.Sprintf("   %s. %s", lessonNum, name))

												if teacher != "" {
													diaryText.WriteString(fmt.Sprintf("\n      üë®‚Äçüè´ %s", teacher))
												}

												if room != "" && room != " " {
													diaryText.WriteString(fmt.Sprintf("\n      üè´ –ö–∞–±–∏–Ω–µ—Ç %s", room))
												}

												if starttime != "" && endtime != "" {
													diaryText.WriteString(fmt.Sprintf("\n      ‚è∞ %s - %s", starttime, endtime))
												}

												// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
												if homeworkData, ok := lesson["homework"]; ok {
													if homework, ok := homeworkData.(map[string]interface{}); ok && len(homework) > 0 {
														diaryText.WriteString("\n      üìù –î–ó:")
														for _, hwData := range homework {
															if hw, ok := hwData.(map[string]interface{}); ok {
																if value, ok := hw["value"].(string); ok && value != "" {
																	diaryText.WriteString(fmt.Sprintf(" %s", value))
																}
															}
														}
													}
												}

												diaryText.WriteString("\n")
											}
										}
									}
									diaryText.WriteString("\n")
								}
							}
						}
					}
					if !ok {
						diaryText.WriteString("üìù –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
						return nil
					}
				}
			}
		}

		if !hasLessons {
			diaryText.WriteString("üìù –£—Ä–æ–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç")
			return nil
		}

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –Ω–µ–¥–µ–ª—é", "diary"),
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
			),
		)

		if err := b.SendMessage(user.ChatID, diaryText.String(), keyboard); err != nil {
			return err
		}
		return nil
	}
	return nil
}

// isDate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
func isDate(s string) bool {
	if len(s) != 8 {
		return false
	}

	for _, r := range s {
		if r < '0' || r > '9' {
			return false
		}
	}

	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—É—é –¥–∞—Ç—É
	year, _ := strconv.Atoi(s[:4])
	month, _ := strconv.Atoi(s[4:6])
	day, _ := strconv.Atoi(s[6:8])

	return year >= 2020 && year <= 2030 && month >= 1 && month <= 12 && day >= 1 && day <= 31
}

// handlePeriods –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–∏–æ–¥–æ–≤
func (b *Bot) handlePeriods(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	periods, err := user.Client.GetPeriods(true, false)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: %v", err), nil)
	}

	if len(periods.Response.Result.Students) == 0 {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ", nil)
	}

	student := periods.Response.Result.Students[0]
	text := "üìÖ <b>–£—á–µ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã:</b>\n\n"

	for _, period := range student.Periods {
		status := "‚úÖ"
		if period.Disabled {
			status = "‚è∏"
		}

		text += fmt.Sprintf("%s <b>%s</b>\n", status, period.FullName)
		startFormatted := formatDateRu(period.Start)
		endFormatted := formatDateRu(period.End)
		text += fmt.Sprintf("   üìÖ %s - %s\n", startFormatted, endFormatted)
		text += fmt.Sprintf("   üìä –ù–µ–¥–µ–ª—å: %d\n\n", len(period.Weeks))
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleMessages –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) handleMessages(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì• –í—Ö–æ–¥—è—â–∏–µ", "msg_inbox"),
			tgbotapi.NewInlineKeyboardButtonData("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", "msg_sent"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", "msg_compose"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, "üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard)
}

// handleMessageAction –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
func (b *Bot) handleMessageAction(user *UserState, action string) error {
	switch action {
	case "msg_inbox":
		return b.showMessages(user, "inbox")
	case "msg_sent":
		return b.showMessages(user, "sent")
	case "msg_compose":
		return b.startComposeMessage(user)
	default:
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", nil)
	}
}

// showMessages –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
func (b *Bot) showMessages(user *UserState, folder string) error {
	messages, err := user.Client.GetMessages(folder)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err), nil)
	}

	folderName := "üì• –í—Ö–æ–¥—è—â–∏–µ"
	if folder == "sent" {
		folderName = "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ"
	}

	text := fmt.Sprintf("üí¨ <b>%s —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", folderName)
	var keyboard [][]tgbotapi.InlineKeyboardButton

	if len(messages.Response.Result.Messages) == 0 {
		text += "\n\n<i>–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç</i>"
	} else {
		for i, msg := range messages.Response.Result.Messages {
			if i >= 15 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π
				break
			}

			subject := msg.Subject
			if len(subject) > 35 {
				subject = subject[:35] + "..."
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
			readStatus := "üìñ"
			if !msg.Read {
				readStatus = "üì©"
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
			sender := ""
			if msg.UserFrom.FirstName != "" || msg.UserFrom.LastName != "" {
				sender = fmt.Sprintf("%s %s", msg.UserFrom.LastName, msg.UserFrom.FirstName)
				sender = strings.TrimSpace(sender)
			}
			if sender == "" {
				sender = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
			}
			if len(sender) > 20 {
				sender = sender[:20] + "..."
			}

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			buttonText := fmt.Sprintf("%s %s\nüë§ %s", readStatus, subject, sender)
			callbackData := fmt.Sprintf("msg_read_%s_%s", folder, msg.ID)

			button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
			keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", fmt.Sprintf("msg_%s", folder)),
		tgbotapi.NewInlineKeyboardButtonData("üóë –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", "clear_chat"),
	})
	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "messages"),
	})

	return b.SendMessage(user.ChatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleClearChat –æ—á–∏—â–∞–µ—Ç —á–∞—Ç
func (b *Bot) handleClearChat(user *UserState) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á—Ç–æ–±—ã "–æ—á–∏—Å—Ç–∏—Ç—å" —á–∞—Ç
	for i := 0; i < 20; i++ {
		_ = b.SendMessage(user.ChatID, ".", nil)
	}

	return b.SendMessage(user.ChatID, "üóë <b>–ß–∞—Ç –æ—á–∏—â–µ–Ω</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
			),
		))
}

// handleReadMessage –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleReadMessage(user *UserState, data string) error {
	parts := strings.Split(data, "_")
	if len(parts) < 4 {
		return b.SendMessage(user.ChatID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è", nil)
	}

	folder := parts[2]
	messageID := parts[3]

	// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	msgDetails, err := user.Client.GetMessageDetails(messageID)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err), nil)
	}

	if msgDetails.Response.State != 200 {
		return b.SendMessage(user.ChatID, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", nil)
	}

	message := msgDetails.Response.Result.Message

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	from := ""
	if message.UserFrom.FirstName != "" || message.UserFrom.LastName != "" {
		from = fmt.Sprintf("%s %s %s", message.UserFrom.LastName, message.UserFrom.FirstName, message.UserFrom.MiddleName)
		from = strings.TrimSpace(from)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
	to := ""
	if len(message.UserTo) > 0 {
		var recipients []string
		for _, user := range message.UserTo {
			recipient := fmt.Sprintf("%s %s", user.LastName, user.FirstName)
			recipients = append(recipients, strings.TrimSpace(recipient))
		}
		to = strings.Join(recipients, ", ")
	}

	subject := message.Subject
	text := message.Text
	date := message.Date

	if from == "" && to != "" {
		from = "–í—ã ‚Üí " + to
	} else if from == "" {
		from = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
	}
	if subject == "" {
		subject = "–ë–µ–∑ —Ç–µ–º—ã"
	}
	// –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
	text = strings.ReplaceAll(text, "<br />", "\n")
	text = strings.ReplaceAll(text, "<br/>", "\n")
	text = strings.ReplaceAll(text, "<br>", "\n")

	if text == "" {
		text = "<i>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>"
	}
	if date == "" {
		date = "<i>–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞</i>"
	}

	messageText := fmt.Sprintf("üì® <b>–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"+
		"üë§ –û—Ç: %s\n"+
		"üìã –¢–µ–º–∞: %s\n"+
		"üìÖ –î–∞—Ç–∞: %s\n\n"+
		"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n%s",
		from, subject, date, text)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ö —Å–æ–æ–±—â–µ–Ω–∏—è–º", fmt.Sprintf("msg_%s", folder)),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, messageText, keyboard)
}

// handleSelectRecipient –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleSelectRecipient(user *UserState, data string) error {
	parts := strings.Split(data, "_")
	if len(parts) < 3 {
		return b.SendMessage(user.ChatID, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", nil)
	}

	recipientID := parts[2]
	user.TempRecipient = recipientID
	user.State = "message_compose_subject"

	return b.SendMessage(user.ChatID, "‚úçÔ∏è <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è:", nil)
}

// startComposeMessage –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
func (b *Bot) startComposeMessage(user *UserState) error {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
	receivers, err := user.Client.GetMessageReceivers()
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: %v", err), nil)
	}

	text := "‚úçÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
	var keyboard [][]tgbotapi.InlineKeyboardButton
	receiversFound := false

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
	result := receivers.Response.Result

	// –í–∞—Ä–∏–∞–Ω—Ç 1: receivers –≤ –∫–æ—Ä–Ω–µ result
	if receiversData, ok := result["receivers"]; ok {
		if receiversArray, ok := receiversData.([]interface{}); ok {
			for i, receiverData := range receiversArray {
				if i >= 20 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
					break
				}

				if receiver, ok := receiverData.(map[string]interface{}); ok {
					id := fmt.Sprintf("%v", receiver["id"])
					name := fmt.Sprintf("%v", receiver["name"])

					buttonText := fmt.Sprintf("üë§ %s", name)
					callbackData := fmt.Sprintf("compose_to_%s", id)

					button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
					keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
					receiversFound = true
				}
			}
		}
	}

	// –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
	if !receiversFound {
		// –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö result
		for _, value := range result {
			if array, ok := value.([]interface{}); ok && len(array) > 0 {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
				if first, ok := array[0].(map[string]interface{}); ok {
					if _, hasID := first["id"]; hasID {
						if _, hasName := first["name"]; hasName {
							// –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
							for i, receiverData := range array {
								if i >= 20 {
									break
								}
								if receiver, ok := receiverData.(map[string]interface{}); ok {
									id := fmt.Sprintf("%v", receiver["id"])
									name := fmt.Sprintf("%v", receiver["name"])

									buttonText := fmt.Sprintf("üë§ %s", name)
									callbackData := fmt.Sprintf("compose_to_%s", id)

									button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
									keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})
									receiversFound = true
								}
							}
							break
						}
					}
				}
			}
		}
	}

	if !receiversFound {
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", nil)
	}

	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "messages"),
	})

	return b.SendMessage(user.ChatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleMessageSubject –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessageSubject(user *UserState, subject string) error {
	user.TempLogin = subject // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º—ã
	user.State = "message_compose_text"
	return b.SendMessage(user.ChatID, "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", nil)
}

// handleMessageText –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessageText(user *UserState, text string) error {
	subject := user.TempLogin
	recipientID := user.TempRecipient

	// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	user.TempLogin = ""
	user.TempRecipient = ""
	user.State = "idle"

	if recipientID == "" {
		return b.SendMessage(user.ChatID, "‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω", nil)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
	recipients := []string{recipientID}

	_, err := user.Client.SendMessage(recipients, subject, text)
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err), nil)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	receivers, err := user.Client.GetMessageReceivers()
	recipientName := recipientID
	if err == nil {
		result := receivers.Response.Result

		// –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
		if receiversData, ok := result["receivers"]; ok {
			if receiversArray, ok := receiversData.([]interface{}); ok {
				for _, receiverData := range receiversArray {
					if receiver, ok := receiverData.(map[string]interface{}); ok {
						id := fmt.Sprintf("%v", receiver["id"])
						if id == recipientID {
							recipientName = fmt.Sprintf("%v", receiver["name"])
							break
						}
					}
				}
			}
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –µ—â–µ", "msg_compose"),
			tgbotapi.NewInlineKeyboardButtonData("üì• –ö —Å–æ–æ–±—â–µ–Ω–∏—è–º", "messages"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, fmt.Sprintf("‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: %s\nüìù –¢–µ–º–∞: %s", recipientName, subject), keyboard)
}

// handleSchedule –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
func (b *Bot) handleSchedule(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	schedule, err := user.Client.GetSchedule("", "")
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: %v", err), nil)
	}

	text := "üìã <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:</b>\n\n"

	if len(schedule.Response.Result.Students) == 0 {
		text += "<i>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i>"
	} else {
		student := schedule.Response.Result.Students[0]
		for _, day := range student.Days {
			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —á–∏—Ç–∞–±—å—ã–π —Ñ–æ—Ä–º–∞—Ç
			dayFormatted := formatDateRu(day.Date)
			text += fmt.Sprintf("üìÖ <b>%s</b>\n", dayFormatted)

			if len(day.Lessons) == 0 {
				text += "   <i>–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç</i>\n\n"
				continue
			}

			for _, lesson := range day.Lessons {
				text += fmt.Sprintf("   %d. <b>%s</b>\n", lesson.Number, lesson.Name)
				if lesson.Teacher != "" {
					text += fmt.Sprintf("      üë®‚Äçüè´ %s\n", lesson.Teacher)
				}
				if lesson.Room != "" {
					text += fmt.Sprintf("      üè´ –ö–∞–±–∏–Ω–µ—Ç %s\n", lesson.Room)
				}
				if lesson.Time != "" {
					text += fmt.Sprintf("      ‚è∞ %s\n", lesson.Time)
				}
			}
			text += "\n"
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleMarks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ü–µ–Ω–æ–∫
func (b *Bot) handleMarks(user *UserState) error {
	if !user.Client.IsAuthenticated() {
		return b.SendMessage(user.ChatID, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ /login", nil)
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("1Ô∏è‚É£ I —á–µ—Ç–≤–µ—Ä—Ç—å", "period_1"),
			tgbotapi.NewInlineKeyboardButtonData("2Ô∏è‚É£ II —á–µ—Ç–≤–µ—Ä—Ç—å", "period_2"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("3Ô∏è‚É£ III —á–µ—Ç–≤–µ—Ä—Ç—å", "period_3"),
			tgbotapi.NewInlineKeyboardButtonData("4Ô∏è‚É£ IV —á–µ—Ç–≤–µ—Ä—Ç—å", "period_4"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –ó–∞ –≤–µ—Å—å –≥–æ–¥", "period_year"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ü–µ–Ω–æ–∫:*", keyboard)
}

// handlePeriodSelect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ü–µ–Ω–æ–∫
func (b *Bot) handlePeriodSelect(user *UserState, data string) error {
	var period int
	var periodName string

	switch data {
	case "period_1":
		period = 1
		periodName = "I —á–µ—Ç–≤–µ—Ä—Ç—å"
	case "period_2":
		period = 2
		periodName = "II —á–µ—Ç–≤–µ—Ä—Ç—å"
	case "period_3":
		period = 3
		periodName = "III —á–µ—Ç–≤–µ—Ä—Ç—å"
	case "period_4":
		period = 4
		periodName = "IV —á–µ—Ç–≤–µ—Ä—Ç—å"
	case "period_year":
		period = 0 // –ó–∞ –≤–µ—Å—å –≥–æ–¥
		periodName = "–í–µ—Å—å —É—á–µ–±–Ω—ã–π –≥–æ–¥"
	default:
		return b.SendMessage(user.ChatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", nil)
	}

	marks, err := user.Client.GetMarks(period, "", "")
	if err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫: %v", err), nil)
	}

	return b.formatMarks(user, marks, periodName)
}

// formatMarks —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫–∏
func (b *Bot) formatMarks(user *UserState, marks *eljur.MarksResponse, periodName string) error {
	text := fmt.Sprintf("üìä <b>–û—Ü–µ–Ω–∫–∏ - %s:</b>\n\n", periodName)

	if len(marks.Response.Result.Students) == 0 {
		text += "<i>–û—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>"
	} else {
		student := marks.Response.Result.Students[0]

		if len(student.Subjects) == 0 {
			text += "<i>–û—Ü–µ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</i>"
		} else {
			for _, subject := range student.Subjects {
				text += fmt.Sprintf("üìö <b>%s</b>\n", subject.Name)

				if len(subject.Marks) == 0 {
					text += "   <i>–û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç</i>\n\n"
				} else {
					text += "   "
					for _, mark := range subject.Marks {
						text += fmt.Sprintf("[%s] ", mark.Value)
					}

					// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
					if len(subject.Marks) > 0 {
						var sum, count float64
						for _, mark := range subject.Marks {
							if val, err := strconv.ParseFloat(mark.Value, 64); err == nil {
								sum += val
								count++
							}
						}
						if count > 0 {
							avg := sum / count
							text += fmt.Sprintf("\n   üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: %.2f", avg)
						}
					}
					text += "\n\n"
				}
			}
		}
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "marks"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleGemini –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Gemini
func (b *Bot) handleGemini(user *UserState) error {
	var text string
	var keyboard tgbotapi.InlineKeyboardMarkup

	if user.GeminiAPIKey == "" {
		text = "ü§ñ *Gemini AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç*\n\n" +
			"‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n" +
			"üîß –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Gemini AI –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n" +
			"1. –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á –≤ Google AI Studio\n" +
			"2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á –≤ –±–æ—Ç–µ\n" +
			"3. –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã\n\n" +
			"üì± –ó–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n" +
			"‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é\n" +
			"‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º\n" +
			"‚Ä¢ –ò—Å–∫–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n" +
			"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API", "gemini_setup"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "gemini_help"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
			),
		)
	} else {
		modelName := user.GeminiModel
		if modelName == "" {
			modelName = "gemini-1.5-flash"
		}

		text = "ü§ñ <b>Gemini AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>\n\n" +
			fmt.Sprintf("‚úÖ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω\nüß† –ú–æ–¥–µ–ª—å: %s\n\n", modelName) +
			"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

		keyboard = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "gemini_chat"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìö –ü–æ–º–æ—â—å —Å –î–ó", "gemini_context_homework"),
				tgbotapi.NewInlineKeyboardButtonData("üìñ –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É", "gemini_context_explain"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîß –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "gemini_model_select"),
				tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "gemini_setup"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
			),
		)
	}

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleGeminiSetup –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Gemini
func (b *Bot) handleGeminiSetup(user *UserState) error {
	if user.GeminiAPIKey != "" {
		// –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
		text := "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini AI</b>\n\n" +
			fmt.Sprintf("üîë API –∫–ª—é—á: –Ω–∞—Å—Ç—Ä–æ–µ–Ω (%s...)\n", user.GeminiAPIKey[:min(8, len(user.GeminiAPIKey))]) +
			fmt.Sprintf("üß† –ú–æ–¥–µ–ª—å: %s\n\n", user.GeminiModel) +
			"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîÑ –°–º–µ–Ω–∏—Ç—å API –∫–ª—é—á", "gemini_change_key"),
				tgbotapi.NewInlineKeyboardButtonData("üß† –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "gemini_model_select"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "gemini_reset"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "gemini"),
			),
		)

		return b.SendMessage(user.ChatID, text, keyboard)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞
	text := "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini AI</b>\n\n" +
		"üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞:</b>\n\n" +
		"1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ <a href=\"https://aistudio.google.com/\">Google AI Studio</a>\n" +
		"2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç\n" +
		"3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´Get API key¬ª –∏–ª–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á¬ª\n" +
		"4Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á\n" +
		"5Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∑–¥–µ—Å—å\n\n" +
		"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π API –∫–ª—é—á!\n\n" +
		"üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á:"

	user.State = "gemini_api_setup"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –û—Ç–º–µ–Ω–∞", "gemini"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleGeminiAPISetup –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ API –∫–ª—é—á–∞
func (b *Bot) handleGeminiAPISetup(user *UserState, apiKey string) error {
	apiKey = strings.TrimSpace(apiKey)

	if len(apiKey) < 10 {
		return b.SendMessage(user.ChatID, "‚ùå API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", nil)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
	testClient := gemini.NewClient(apiKey, "gemini-1.5-flash")
	if err := testClient.ValidateAPIKey(); err != nil {
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á: %v\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:", err), nil)
	}

	user.GeminiAPIKey = apiKey
	user.GeminiModel = "gemini-1.5-flash" // –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	user.State = "idle"

	text := "‚úÖ <b>API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n" +
		"üß† –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: gemini-1.5-flash\n\n" +
		"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini AI –¥–ª—è –ø–æ–º–æ—â–∏ —Å —É—á–µ–±–æ–π!"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini", "gemini"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleGeminiModelSelect –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
func (b *Bot) handleGeminiModelSelect(user *UserState, data string) error {
	if strings.HasPrefix(data, "gemini_model_") && data != "gemini_model_select" {
		// –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
		model := strings.TrimPrefix(data, "gemini_model_")
		user.GeminiModel = model

		description := gemini.GetModelDescription(model)
		text := fmt.Sprintf("‚úÖ <b>–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\nüß† –í—ã–±—Ä–∞–Ω–∞: %s\n%s", model, description)

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "gemini_chat"),
				tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "gemini"),
			),
		)

		return b.SendMessage(user.ChatID, text, keyboard)
	}

	// –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
	text := "üß† <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Gemini:</b>\n\n"
	var keyboard [][]tgbotapi.InlineKeyboardButton

	for _, model := range gemini.GetAvailableModels() {
		description := gemini.GetModelDescription(model)
		current := ""
		if model == user.GeminiModel {
			current = " ‚úÖ"
		}

		buttonText := fmt.Sprintf("%s%s", model, current)
		callbackData := fmt.Sprintf("gemini_model_%s", model)

		button := tgbotapi.NewInlineKeyboardButtonData(buttonText, callbackData)
		keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{button})

		text += fmt.Sprintf("%s\n\n", description)
	}

	keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "gemini"),
	})

	return b.SendMessage(user.ChatID, text, tgbotapi.NewInlineKeyboardMarkup(keyboard...))
}

// handleGeminiContextSelect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func (b *Bot) handleGeminiContextSelect(user *UserState, data string) error {
	context := ""
	contextName := ""

	switch data {
	case "gemini_context_homework":
		context = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é. –ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–±—ä—è—Å–Ω–∏ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã, –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è."
		contextName = "–ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º"
	case "gemini_context_explain":
		context = "–¢—ã —É—á–∏—Ç–µ–ª—å-–æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å. –û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –ø—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã, –¥–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ –≤–∏–¥–µ–æ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
		contextName = "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã"
	default:
		context = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —É—á–µ–Ω–∏–∫–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞–π —Å —É—á–µ–±–æ–π."
		contextName = "–û–±—â–∏–π —á–∞—Ç"
	}

	user.GeminiContext = context
	user.State = "gemini_chat"

	text := fmt.Sprintf("ü§ñ <b>%s</b>\n\nüí≠ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", contextName)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "gemini"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleGeminiChatStart –Ω–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç —Å Gemini
func (b *Bot) handleGeminiChatStart(user *UserState) error {
	if user.GeminiAPIKey == "" {
		return b.SendMessage(user.ChatID, "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á —á–µ—Ä–µ–∑ /gemini_setup", nil)
	}

	user.State = "gemini_chat"
	user.GeminiContext = "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ —É—á–µ–Ω–∏–∫–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞–π —Å —É—á–µ–±–æ–π."

	text := "ü§ñ <b>–ß–∞—Ç —Å Gemini AI</b>\n\nüí≠ –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n" +
		"<i>–ü—Ä–∏–º–µ—Ä—ã:</i>\n" +
		"‚Ä¢ –û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è\n" +
		"‚Ä¢ –ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω–µ\n" +
		"‚Ä¢ –ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ñ–∏–∑–∏–∫–µ\n" +
		"‚Ä¢ –î–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –ø–æ –∞–ª–≥–µ–±—Ä–µ"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "gemini"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleGeminiChat –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Å Gemini
func (b *Bot) handleGeminiChat(user *UserState, message string) error {
	if user.GeminiAPIKey == "" {
		return b.SendMessage(user.ChatID, "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /gemini_setup", nil)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
	if len(strings.TrimSpace(message)) == 0 {
		return b.SendMessage(user.ChatID, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å", nil)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
	processingMsg := tgbotapi.NewMessage(user.ChatID, "ü§î Gemini –¥—É–º–∞–µ—Ç...")
	sentMsg, _ := b.API.Send(processingMsg)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Gemini
	client := gemini.NewClient(user.GeminiAPIKey, user.GeminiModel)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Gemini
	response, err := client.SendMessage(message, user.GeminiContext)

	// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞–µ—Ç"
	if sentMsg.MessageID != 0 {
		deleteMsg := tgbotapi.NewDeleteMessage(user.ChatID, sentMsg.MessageID)
		b.API.Send(deleteMsg)
	}

	if err != nil {
		user.State = "idle"
		return b.SendMessage(user.ChatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ Gemini: %v\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.", err), nil)
	}

	// –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
	response = strings.ReplaceAll(response, "\u0000", "")
	response = strings.ReplaceAll(response, "`", "'")   // –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
	response = strings.ReplaceAll(response, "*", "\\*") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
	response = strings.ReplaceAll(response, "_", "\\_") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
	response = strings.ReplaceAll(response, "[", "\\[") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
	response = strings.ReplaceAll(response, "]", "\\]")
	response = strings.TrimSpace(response)

	if response == "" {
		return b.SendMessage(user.ChatID, "‚ùå Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", nil)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	maxLength := 3900 // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–Ω–æ–ø–æ–∫

	if len(response) <= maxLength {
		// –û—Ç–≤–µ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
		text := fmt.Sprintf("ü§ñ <b>Gemini AI:</b>\n\n%s", response)

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç", "gemini_chat"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üîô –ú–µ–Ω—é Gemini", "gemini"),
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
			),
		)

		return b.SendMessage(user.ChatID, text, keyboard)
	} else {
		// –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
		parts := splitMessage(response, maxLength-100) // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —á–∞—Å—Ç–∏

		for i, part := range parts {
			var text string
			var keyboard tgbotapi.InlineKeyboardMarkup

			if i == 0 {
				text = fmt.Sprintf("ü§ñ <b>Gemini AI</b> (—á–∞—Å—Ç—å %d/%d):\n\n%s", i+1, len(parts), part)
			} else {
				text = fmt.Sprintf("ü§ñ <b>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ</b> (—á–∞—Å—Ç—å %d/%d):\n\n%s", i+1, len(parts), part)
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
			if i == len(parts)-1 {
				keyboard = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç", "gemini_chat"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üîô –ú–µ–Ω—é Gemini", "gemini"),
						tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
					),
				)
			}

			if err := b.SendMessage(user.ChatID, text, keyboard); err != nil {
				return err
			}

			// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
			time.Sleep(500 * time.Millisecond)
		}

		return nil
	}
}

// handleGeminiHelp –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Gemini
func (b *Bot) handleGeminiHelp(user *UserState) error {
	text := "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Gemini AI</b>\n\n" +
		"üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n" +
		"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ <a href=\"https://aistudio.google.com/\">Google AI Studio</a>\n" +
		"2. –í–æ–π–¥–∏—Ç–µ –≤ Google –∞–∫–∫–∞—É–Ω—Ç\n" +
		"3. –ù–∞–∂–º–∏—Ç–µ ¬´Get API key¬ª\n" +
		"4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n" +
		"5. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á\n" +
		"6. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –±–æ—Ç–∞\n\n" +
		"ü§ñ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n" +
		"‚Ä¢ –ü–æ–º–æ—â—å —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º\n" +
		"‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º\n" +
		"‚Ä¢ –ü–æ–∏—Å–∫ —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n" +
		"‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ\n" +
		"‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏ –ø—Ä–∏–º–µ—Ä–æ–≤\n\n" +
		"üí° <b>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</b>\n" +
		"‚Ä¢ ¬´–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞¬ª\n" +
		"‚Ä¢ ¬´–ù–∞–π–¥–∏ –≤–∏–¥–µ–æ –ø—Ä–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è¬ª\n" +
		"‚Ä¢ ¬´–ü–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π –ø–æ —Ö–∏–º–∏–∏¬ª\n" +
		"‚Ä¢ ¬´–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∏—Ç–æ–∑ –≤ –±–∏–æ–ª–æ–≥–∏–∏?¬ª"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API", "gemini_setup"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "gemini"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// handleGeminiReset —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini
func (b *Bot) handleGeminiReset(user *UserState) error {
	user.GeminiAPIKey = ""
	user.GeminiModel = ""
	user.GeminiContext = ""
	user.State = "idle"

	text := "üóë <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n" +
		"–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ", "gemini_setup"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
		),
	)

	return b.SendMessage(user.ChatID, text, keyboard)
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
